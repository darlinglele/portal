<img class="cover" src="/static/images/full-text-indexing-search.png"/>
<p>
    本文开始将记录开发全文搜索功能的过程，一个商业搜索引擎通常包含三个部分：爬虫程序；索引；排名算法。作为站内的全文搜索，我将跳过爬虫的部分，直接为站内的文章进行索引。所以第一步是先建立全文索引，仅要求支持简单多关键字查找，不对匹配结果进行排名。下一阶段将对结果进行排名。
</p>

<h4>倒排索引的数据结构</h4>
<p>
    索引是一种Key:Value的结构。简单的索引包括索引的关键字：英文单词、中文词语，索引的对象（Value）：文档。 一个简单的例子：
</p>
<p>
    <b>piano: [document(a),document(b),document(c)];</b>
</p>
<p>
    <b>violin: [document(x),document(y),document(z)];</b>
</p>

<p>
    这组信息仅仅包含了关键字和包含它的文档，虽然足以根据关键字找到文档，不过对匹配到的结果想要进行相关排序就无从下手了。所以通常还会包含一些其他的必要的索引信息，例如关键字在文档中出现的频率、位置等，只有这样我们后续才有可能对匹配结果进行排名。
<p>
    <b>piano: [[document(a), 1, 0],[document(b),2,[1 2]],[document(c),3, [0,3,5]];</b>
</p>
<p>
    这条索引记录就包含了频率和位置信息， 它表示关键字piano在3个文档中出现的次数和位置，其中位置是一维的向量。
</p>
<h4>中文分词 </h4>
<p>
    对于中文文档，词语和词语之间没有分隔符，所以首先要做到能正确的断句。这事对一个中国的小学生来说都不是个问题，但对于计算机来说确是一件不太容易的事情。关于中文分词，超出了本文的讨论范围，将在另一篇文章里单独讨论，本章的涉及的分词程序是一个基于最长匹配的分词算法，分词的准确行较为弱，
    有很大的改进空间。
</p>
<h4>如何存储倒排索引的数据</h4>
<p>未完待续</p>
